namespace manualTest ;

use com.ibm.streamsx.solr::SolrDocumentSink ;
/** To use this sample, you can start Solr with the default Solr example (5.3.1)
		bin/solr start -p 8984 -s "example/techproducts/solr"
This will create a collection called techproducts.

Verifying this test:
	Ids 100-199 should be populated with name: ManyTypesTest
*/
composite TestIncrement
{
	param
		expression<rstring> $solrServer : getSubmissionTimeValue("solrServer",
			"http://localhost:8983/solr/") ;
		expression<rstring> $solrCollection :
			getSubmissionTimeValue("solrCollection", "techproducts") ;
	graph
	/** Generate attributes as well as map.		
		Notice: The unique id is not part of the map (it is specified in the operator parameters.		
		*/
		stream<rstring id, int32 popularity, map<ustring,
			ustring> atomicUpdateMap> Beacon_2_out0 = Custom()
		{
			logic
				onProcess :
				{
					mutable map<ustring, ustring> actionMap = { } ;
					insertM(actionMap,(ustring) "popularity",(ustring) "inc") ;
					for(int32 j in range(100))
					{
						submit({ id = "IW-02", popularity = 5, atomicUpdateMap = actionMap }, Beacon_2_out0) ;
						block(0.1) ;
					}

				}

		}

		(stream<rstring message> ErrorPort) as SolrDocSinker =
			SolrDocumentSink(Beacon_2_out0)
		{
			param
				uniqueKeyAttribute : id ;
				solrURL : $solrServer ;
				collection : $solrCollection ;
				documentCommitSize : 3 ;
				maxDocumentBufferAge : 3500 ;
		}

		() as ErrorWriter = Custom(ErrorPort)
		{
			logic
				onTuple ErrorPort :
				{
					printStringLn("Error : " + message) ;
				}

		}

}


