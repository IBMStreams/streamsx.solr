namespace application ;

use com.ibm.streamsx.solr::SolrDocumentSink ;

/*
 * To use this sample, you can start Solr with the default Solr example (5.3.1) 
 * 		bin/solr start -p 8984 -s "example/techproducts/solr"
 * This will create a collection called techproducts. 
 */
composite SolrDocumentSinkSample
{
	param
		expression<rstring> $solrServer : getSubmissionTimeValue("solrServer","http://localhost:8983/solr/" );
		expression<rstring> $solrCollection : getSubmissionTimeValue("solrCollection","techproducts" );
	graph
	
		/*
		 * Generate attributes as well as map.
		 * Notice: The unique id is not part of the map (it is specified in the operator parameters.
		 * The options for each element in the map are set, add, remove, removeregex, or inc. 
		 */ 
		stream<rstring id, ustring name, boolean my_bool_bs, int32 my_int_is, float32 my_float_fs, ustring features, map<ustring,ustring> atomicUpdateMap> Beacon_2_out0 = Custom()
		{
			logic
				onProcess :
				{
					ustring features = "This is a feature added by the SolrDocAddSample." ;
					ustring name = "DocAddSample" ;
					mutable map<ustring, ustring> actionMap = { } ;
					insertM(actionMap,(ustring) "name",(ustring) "set") ;
					insertM(actionMap,(ustring) "features",(ustring) "add") ;
					insertM(actionMap,(ustring) "my_bool_bs",(ustring) "add") ;
					insertM(actionMap,(ustring) "my_int_is",(ustring) "add") ;
					insertM(actionMap,(ustring) "my_float_fs",(ustring) "add") ;
					for(int32 j in range(100))
					{
						submit({ id =(rstring) j, name = name, my_bool_bs = true, my_int_is = j, my_float_fs = (float32) random(), features =
							features + (ustring) j, atomicUpdateMap = actionMap}, Beacon_2_out0) ;
						block(0.1) ;
					}

				}

		}

		
		//Test URL: http://localhost:8983/solr/techproducts/select/?wt=json&q=*:*&rows=200
		(stream<rstring message> ErrorPort) as SolrDocSinker =
			SolrDocumentSink(Beacon_2_out0)
		{
			param 
				uniqueKeyAttribute : id ;
				solrURL : $solrServer ;
				collection : $solrCollection;
				documentCommitSize : 3;
				maxDocumentBufferAge : 3500;
		}

		() as ErrorWriter = Custom(ErrorPort)
		{
			logic onTuple ErrorPort : {
				printStringLn("Error : " + message);
			}
		}

}



